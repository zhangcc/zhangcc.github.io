import httplib
import re

#how to use:
#run the script and check the thefile.txt generated by script
#copy the output in thefile.txt and override the 'cawl' array in /assert/js/data/linuxcast.data.js
#if note added, simply change the 'notes' array in /assert/js/data/linuxcast.data.js

class video:
	id = ''
	src_mp4 = ''
	src_webm = ''
	type_mp4 = ''
	type_webm = ''
	lib = ''
	course = ''
	title = ''

	def toJson(self):
		return '''{{ src_mp4 : "{0}", 
					src_webm : "{1}", 
					type_mp4 : "{2}" , 
					type_webm : "{3}", 
					lib : "{4}", 
					course : "{5}", 
					title : "{6}" , id :"{7}" }}'''.format(self.src_mp4,self.src_webm,self.type_mp4,self.type_webm,self.lib,self.course,self.title,self.id)




videoes = []

Host = 'itercast.com'
Range = 300

videoPattern = re.compile(r'<source\s+src\s*=\s*"(.*)" type\s*=\s*"(.*)">')
titlePattern = re.compile(r'<title>(.*)</title>')
ulPattern = re.compile(r'<li><a href="/library/\d+(/course/\d+)?">(.*)</a></li>')


conn = httplib.HTTPConnection(Host)

for i in range(Range):
	conn.request("GET", "/lecture/" + str(i))
	res = conn.getresponse()
	if res.status == 200:
		html = res.read()
		print i
		#print html
		match = videoPattern.findall(html)
		m_title = titlePattern.findall(html)
		m_ul = ulPattern.findall(html)
		if match:
			v = video()
			v.id = i
			v.src_mp4 = match[0][0]
			v.type_mp4 = match[0][1]
			v.src_webm = match[1][0]
			v.type_webm = match[1][1]
			v.title = m_title[0]
			v.lib = m_ul[0][1]
			v.course = m_ul[1][1]
			videoes.append(v)
	else:
		print res.status
		res.read()

data_array = []
for vi in videoes:
	data_array.append(vi.toJson())

file_object = open('thefile.txt','w')
try:
     all_the_text = file_object.write('cawl=[' + ','.join(data_array) + ']')
finally:
     file_object.close()
